version: 2.1

orbs: 
  slack: circleci/slack@4.9.4
commands:  
  destroy-prometheus-environment:
    description: Destroy prometheus cloudformation stacks.
    steps:
      - run:
          name: Destroy prometheus cloudformation stacks
          when: on_fail         
          command: |
            aws cloudformation delete-stack --stack-name udapeople-prometheus-server
            
jobs:

  smoke-test-prometheus-server-before-deploy:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout

      # Install dependencies
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip3 install --no-cache-dir awscli
            echo ${PWD}

      - attach_workspace:
          at: ~/

      - run:
          name: Get PROMETHEUS_IP url
          command: |          
          
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=udapeople-prometheus-server" \
              --output text > ~/PROMETHEUS_IP.txt

            export PROMETHEUS_IP=$(cat ~/PROMETHEUS_IP.txt)      
            echo "PROMETHEUS_IP = ${PROMETHEUS_IP}"
            export PROMETHEUS_URL="http://${PROMETHEUS_IP}:9090/targets"
            echo "${PROMETHEUS_URL}" > ~/PROMETHEUS_URL.txt
            chmod 777 ~/PROMETHEUS_URL.txt
            cat ~/PROMETHEUS_URL.txt

      - run:
          name: PROMETHEUS smoke test.
          command: |
            export PrometheusStatus="ERROR"

            URL=$(cat ~/PROMETHEUS_URL.txt)            
            echo ${URL} 
            #  | grep "Targets"
            if curl -s ${URL}
            then
              export PrometheusStatus="OK"
            else
              export PrometheusStatus="ERROR"
            fi
            
      # Send prometheus status to kvdb.io
      - run:
          name: Send prometheus status to kvdb.io
          command: |   
            export KEY="PrometheusStatus"
            curl "https://kvdb.io/Y2wgZLY8miMzxFRtpP8iEb/${KEY}"  -d '\"${PrometheusStatus}\"'
            curl --insecure "https://kvdb.io/Y2wgZLY8miMzxFRtpP8iEb/${KEY}"

      - run:
          name: Check prometheus status , status OK -> job fail and do not create infrastructure
          command: |
            
            if (( $PROMETHEUS_STATUS = 'OK' ));
            then              
              echo "PROMETHEUS_STATUS = ${PROMETHEUS_STATUS}"
              exit 1
            fi

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1 
          
      - slack/notify:
          channel: general
          event: pass
          template: success_tagged_deploy_1

  deploy-prometheus-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: install tar gzip
          command: |
            yum -y install tar gzip curl

      - run:
          name: Get prometheus status
          command: |
            export KEY="PrometheusStatus"
            export PROMETHEUS_STATUS=$(curl --insecure  https://kvdb.io/Y2wgZLY8miMzxFRtpP8iEb/${KEY})

      - run:
          name: Ensure prometheus infrastructure exists
          command: |
            
            if (( $PROMETHEUS_STATUS != 'OK' ));
            then     
              aws cloudformation deploy \
                --template-file .circleci/files/prometheus_server.yml \
                --stack-name "udapeople-prometheus-server" \
                --tags project=udapeople
            fi

      - run:
          name: Add prometheus ip to ansible prometheus_inventory
          command: |            
            
            echo "[prometheus]" > ~/prometheus_inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=udapeople-prometheus-server" \
              --output text > ~/PROMETHEUS_IP.txt

            export PROMETHEUS_IP=$(cat ~/PROMETHEUS_IP.txt)
            echo "${PROMETHEUS_IP}" >> ~/prometheus_inventory.txt

            cat ~/prometheus_inventory.txt                 

      - persist_to_workspace:
          root: ~/
          paths:
            - PROMETHEUS_IP.txt
            - prometheus_inventory.txt

      # Here's where you will add some code to rollback on failure  
      - destroy-prometheus-environment

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  configure-prometheus-server:
    docker:
      # Docker image here that supports Ansible     
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout

      # Add ssh keys with fingerprint      
      - add_ssh_keys:
          fingerprints: ["45:8b:60:3b:68:26:7f:2e:f1:88:e2:35:96:1d:14:73"] 
          # You can get this ID in the section where you registered the SSH Key

      # attach workspace
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
          
      # Install dependencies
      - run:
          name: Install dependencies
          command: |
            pip install --upgrade pip
            apk add --update tar gzip ansible nodejs npm curl
            pip3 install --no-cache-dir awscli

      - run:
          name: Get prometheus status
          command: |
            export KEY="PrometheusStatus"
            export PROMETHEUS_STATUS=$(curl --insecure  https://kvdb.io/Y2wgZLY8miMzxFRtpP8iEb/${KEY})

      - run:
          name: Deploy prometheus server
          command: |    
            echo "Contents  of the ~/inventory.txt file is -------"
            cat ~/prometheus_inventory.txt
            
            if (( $PROMETHEUS_STATUS != 'OK' ));
            then     
              ansible-playbook -i ~/prometheus_inventory.txt .circleci/ansible/configure-prometheus-server.yml
            fi

      # Remote EC2 to check backend status
      # pm2 list
      # pm2 logs npm
      # sudo apt install net-tools
      #  netstat -na | grep 3030
      
      # Here's where you will add some code to rollback on failure   
      - destroy-prometheus-environment

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1 

  smoke-test-prometheus-server:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout

      # Install dependencies
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip3 install --no-cache-dir awscli
            echo ${PWD}

      - attach_workspace:
          at: ~/

      - run:
          name: Get PROMETHEUS_IP url
          command: |          
            export PROMETHEUS_IP=$(cat ~/PROMETHEUS_IP.txt)      
            echo "PROMETHEUS_IP = ${PROMETHEUS_IP}"
            export PROMETHEUS_URL="http://${PROMETHEUS_IP}:9090/targets"
            echo "${PROMETHEUS_URL}" > ~/PROMETHEUS_URL.txt
            chmod 777 ~/PROMETHEUS_URL.txt
            cat ~/PROMETHEUS_URL.txt

      - run:
          name: PROMETHEUS smoke test.
          command: |
            export PrometheusStatus="ERROR"

            URL=$(cat ~/PROMETHEUS_URL.txt)            
            echo ${URL} 

            KEY="PrometheusStatus"
            
            if curl -s ${URL} | grep "Prometheus Time Series Collection and Processing Server"
            then
                # Change this to 0 after the job fails
              export PrometheusStatus="OK"
              curl "https://kvdb.io/Y2wgZLY8miMzxFRtpP8iEb/${KEY}"  -d '\"${PrometheusStatus}\"'
              curl --insecure "https://kvdb.io/Y2wgZLY8miMzxFRtpP8iEb/${KEY}"
              return 0
            else
              export PrometheusStatus="ERROR"
              curl "https://kvdb.io/Y2wgZLY8miMzxFRtpP8iEb/${KEY}"  -d '\"${PrometheusStatus}\"'
              curl --insecure "https://kvdb.io/Y2wgZLY8miMzxFRtpP8iEb/${KEY}"
              return 1
            fi            

      # # Here's where you will add some code to rollback on failure   
      - destroy-prometheus-environment

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1 
          
      - slack/notify:
          channel: general
          event: pass
          template: success_tagged_deploy_1

workflows:
  default:
    jobs:
      - smoke-test-prometheus-server-before-deploy:
          context: SLACK_APP
          filters:
            branches:
              only: [prometheus-server]   
      - deploy-prometheus-infrastructure: 
          context: SLACK_APP
          requires: [smoke-test-prometheus-server-before-deploy]
          filters:
            branches:
              only: [prometheus-server]   
      - configure-prometheus-server:
          context: SLACK_APP
          requires: [deploy-prometheus-infrastructure]
      - smoke-test-prometheus-server:
          context: SLACK_APP
          requires: [configure-prometheus-server]