version: 2.1

orbs: 
  slack: circleci/slack@4.9.4
commands:
  destroy-backend-environment:
    description: Destroy back-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: "ID"
        type: string 
    steps:
      - run:
          name: Destroy backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            
  destroy-frontend-environment:
    description: Destroy front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: "ID"
        type: string 
    steps:
      - run:
          name: Destroy frontend environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force  
            aws cloudformation delete-stack --stack-name udapeople-prontend-<<parameters.workflow_id>>
  
  destroy-environment:
    description: Destroy back-end & frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: "ID"
        type: string 
    steps:
      - run:
          name: Destroy backend & frontend environments
          when: on_fail         
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force  
            aws cloudformation delete-stack --stack-name udapeople-prontend-<<parameters.workflow_id>>
            
  destroy-test-environment:
    description: Destroy back-end & frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: "ID"
        type: string 
    steps:
      - run:
          name: Destroy backend & frontend environments
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force  
            aws cloudformation delete-stack --stack-name udapeople-prontend-<<parameters.workflow_id>>
            
            
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        default: "ID"
        type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/Y2wgZLY8miMzxFRtpP8iEb/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi  
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Run front-end tests
          command: |
            cd frontend
            npm install
            npm run test

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Run back-end tests
          command: |
            cd backend
            npm install
            npm run test

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Audit front-end
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Audit back-end
          command: |
            cd backend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1
          
      # - slack/notify:
      #     channel: general
      #     event: pass
      #     template: success_tagged_deploy_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: install tar gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople

      - destroy-backend-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-prontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople

      - destroy-frontend-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > ~/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt  

      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible      
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout

      # Add ssh keys with fingerprint      
      - add_ssh_keys:
          fingerprints: ["45:8b:60:3b:68:26:7f:2e:f1:88:e2:35:96:1d:14:73"] 
          # You can get this ID in the section where you registered the SSH Key

      # attach workspace
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
          
      # Install dependencies
      - run:
          name: Install dependencies
          command: |
            pip install --upgrade pip
            apk add --update ansible
            pip3 install --no-cache-dir awscli
      - run:
          name: Configure server
          # echo "[web]" > ~/inventory.txt
          # echo "ec2-54-234-161-164.compute-1.amazonaws.com" >> ~/inventory.txt
          command: |
            cat ~/inventory.txt
            ansible-playbook -i ~/inventory.txt .circleci/ansible/configure-server.yml 
      
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"      

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1     
      
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0      
      
    steps:
      # Checkout code from git
      - checkout

      # Install dependencies
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y install python3-pip
            sudo pip3 install --no-cache-dir awscli

      - run:
          name: Run migrations
          # Run and save the migration output
          command: |
            cd backend
            npm cache clean --force
            rm -rf node_modules
            npm install        
            npm run migrations --force > ~/migrations_dump.txt
            cat ~/migrations_dump.txt

      # Send migration status to kvdb.io
      - run:
          name: Send migration status to kvdb.io
          # If you are using kvdb.io, generate the bucket ID "Y2wgZLY8miMzxFRtpP8iEb" in your local terminal first
          command: |   
            if grep -q "has been executed successfully." ~/migrations_dump.txt
            then
              curl "https://kvdb.io/Y2wgZLY8miMzxFRtpP8iEb/migration_${CIRCLE_WORKFLOW_ID:0:7}"  -d '1'
              curl --insecure "https://kvdb.io/Y2wgZLY8miMzxFRtpP8iEb/migration_${CIRCLE_WORKFLOW_ID:0:7}"
            fi

     # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"       

      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1 

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
          
      # Install dependencies
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y install python3-pip
            sudo apt-get -y install tar gzip
            sudo pip3 install --no-cache-dir awscli

      - run:
          name: Get backend url
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text >> ~/inventory.txt

            export BACKEND_IP=$(cat ~/inventory.txt)            
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist --totals
            echo "tar $PWD/artifact-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz"
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            echo "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      
      # Add ssh keys with fingerprint      
      - add_ssh_keys:
          fingerprints: ["45:8b:60:3b:68:26:7f:2e:f1:88:e2:35:96:1d:14:73"] 
          # You can get this ID in the section where you registered the SSH Key

      # Install dependencies
      - run:
          name: Install dependencies
          command: |
            pip install --upgrade pip
            apk add --update nodejs            
            apk add --update npm 
            apk add --update ansible 
            apk add --update tar gzip 
            apk add --update curl
            pip3 install --no-cache-dir awscli

      - run:
          name: Build & tar backend folder
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            
            tar -czvf /tmp/artifact.tar.gz backend --totals

            FILE=/tmp/artifact.tar.gz
            if [ -f "$FILE" ]; then
                echo "$FILE exists."
            else 
                echo "$FILE does not exist."
                exit 1
            fi

      - run:
          name: Deploy backend
          command: |            
            echo "[web]" > ~/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text >> ~/inventory.txt
              
            echo "Contents  of the inventory.txt file is -------"
            cat ~/inventory.txt

            ansible-playbook -i ~/inventory.txt .circleci/ansible/deploy-backend.yml
      
      # Here's where you will add some code to rollback on failure   
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"      

      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1 

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout

      # Install dependencies
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip3 install --no-cache-dir awscli
            echo ${PWD}

      - run:
          name: Get backend url
          command: |          
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text > ~/ip.txt
            chmod 777 ~/ip.txt
            BACKEND_IP=$(cat ~/ip.txt)
            export STATUS_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${STATUS_URL}" > ~/statusURL.txt
            chmod 777 ~/statusURL.txt
            cat ~/statusURL.txt

      - run:
          name: Backend smoke test.
          command: |
            STATUS_URL=$(cat ~/statusURL.txt)

            if curl "${STATUS_URL}" | grep "ok"
            then
                echo "test ${STATUS_URL} OK"
                return 0
            else
                echo "test ${STATUS_URL} FAIL"
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # # Here's where you will add some code to rollback on failure   
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1 

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout

      # Install dependencies
      - run:
          name: Install dependencies
          command: |
            pip install --upgrade pip
            apk add --update curl
            pip3 install --no-cache-dir awscli
      - run:
          name: Update cloudfront distribution
          command: |
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople
#       # Here's where you will add some code to rollback on failure  
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi

  remove-test-environment:
    docker:
      - image: amazon/aws-cli
    steps:
      - destroy-test-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1
workflows:
  default:
    jobs:
      # - build-frontend:
      #     context: SLACK_APP
      # - build-backend:
      #     context: SLACK_APP
      # - test-frontend:
      #     context: SLACK_APP
      #     requires: [build-frontend]
      # - test-backend:
      #     context: SLACK_APP
      #     requires: [build-backend]
      # - scan-backend:
      #     context: SLACK_APP
      #     requires: [build-backend]
      # - scan-frontend:
      #     context: SLACK_APP
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     context: SLACK_APP
      #     # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      # - configure-infrastructure:
      #     context: SLACK_APP
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     context: SLACK_APP
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     context: SLACK_APP
      #     requires: [run-migrations]
      # - deploy-backend:
      #     context: SLACK_APP
      #     requires: [run-migrations]
      - smoke-test:
          context: SLACK_APP
          # requires: [deploy-backend, deploy-frontend]
          # requires: [deploy-backend]
      # - cloudfront-update:
          # context: SLACK_APP
      #     requires: [smoke-test]
      # - cleanup:
          # context: SLACK_APP
      #     requires: [cloudfront-update]
      # - remove-test-environment:
      #     context: SLACK_APP
      #     requires: [deploy-backend]